import React, { useEffect, useState } from "react";
import axios from "axios";
import '../scss/Basket.scss';
import { IMaskInput } from 'react-imask';


export default function Basket() {
  const [cartItems, setCartItems] = useState([]);

  const [formErrors, setFormErrors] = useState({});


  const initialFormData = {
    name: "",
    surname: "",
    address: "",
    phone: "",
    paymentMethod: "–ù–∞–ª–∏—á–Ω—ã–µ",
    comments: "",
  };

  const [formData, setFormData] = useState(initialFormData);

  useEffect(() => {
    const stored = localStorage.getItem("basket");
    if (stored) {
      setCartItems(JSON.parse(stored));
    }
  }, []);

  const updateLocalStorage = (items) => {
    setCartItems(items);
    localStorage.setItem("basket", JSON.stringify(items));
  };

  const handleRemoveFromCart = (indexToRemove) => {
    const updatedCart = cartItems.filter((_, index) => index !== indexToRemove);
    updateLocalStorage(updatedCart);
  };

  const increaseQuantity = (index) => {
    const updatedCart = [...cartItems];
    updatedCart[index].quantity = (updatedCart[index].quantity || 1) + 1;
    updateLocalStorage(updatedCart);
  };

  const decreaseQuantity = (index) => {
    const updatedCart = [...cartItems];
    updatedCart[index].quantity = (updatedCart[index].quantity || 1) - 1;
    if (updatedCart[index].quantity < 1) updatedCart[index].quantity = 1;
    updateLocalStorage(updatedCart);
  };

  const totalAmount = cartItems.reduce((sum, item) => {
    const quantity = item.quantity || 1;
    return sum + item.price * quantity;
  }, 0);

  const handleFormChange = (e) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };


  
  const sendOrderToTelegram = async (formData, cartItems, totalAmount) => {
    const botToken = import.meta.env.VITE_TELEGRAM_BOT_TOKEN;
    const chatId = import.meta.env.VITE_TELEGRAM_CHAT_ID;
  
    const message = 
    `üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!
    
  üë§ –ò–º—è: ${formData.name}
  üë§ –§–∞–º–∏–ª–∏—è: ${formData.surname}
  üè° –ê–¥—Ä–µ—Å: ${formData.address}
  üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone}
  üí≥ –û–ø–ª–∞—Ç–∞: ${formData.paymentMethod}
  üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${formData.comments || "‚Äî"}
    
  üßæ –¢–æ–≤–∞—Ä—ã:
  ${cartItems
  .map(
  (item, i) =>
  `${i + 1}. ${item.emoji || "üçΩÔ∏è"} ${item.title} ‚Äî x${item.quantity || 1} = ${
  item.price * (item.quantity || 1)
  } —Å–æ–º`
  )
  .join('\n')}
    
üí∞ –û–±—â–∞—è —Å—É–º–º–∞: ${totalAmount.toFixed(2)} —Å–æ–º`;
    
    
  
    try {
      await axios.post(`https://api.telegram.org/bot${botToken}/sendMessage`, {
        chat_id: chatId,
        text: message,
      });
      alert("‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram!");
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞:", error.response?.data || error.message);
      alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞.");
    }
  };
  
  

  const handleSubmit = async (e) => {
    e.preventDefault();
  
    if (!validateForm()) return;
  
    await sendOrderToTelegram(formData, cartItems, totalAmount);
    setCartItems([]);
    localStorage.removeItem("basket");
    setFormData(initialFormData);
    setFormErrors({});
  };
  

  const validateForm = () => {
    const errors = {};
  
    if (!formData.name.trim()) errors.name = "–í–≤–µ–¥–∏—Ç–µ –∏–º—è";
    if (!formData.surname.trim()) errors.surname = "–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é";
    if (!formData.address.trim()) errors.address = "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å";
    if (!formData.phone.trim()) errors.phone = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞";
    if (!formData.paymentMethod) errors.paymentMethod = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã";
  
    setFormErrors(errors);
  
    return Object.keys(errors).length === 0;
  };
  


  return (
    <div className="container">
      <section className="Basket">
        <h1 className="title">–ö–æ—Ä–∑–∏–Ω–∫–∞</h1>

        <div className="cart-itemss">
          {cartItems.length === 0 ? (
            <p className="cart__subtitle">–í—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ —Ç–æ–≤–∞—Ä ...</p>
          ) : (
            cartItems.map((item, index) => (
              <div key={`${item.id}-${index}`} className="product-cardd">
                <div className="product-cardd__Tp1">
                  {item.img && (
                    <img
                      src={item.img}
                      alt={item.title}
                      className="product-cardd__image"
                    />
                  )}
                  <h2 className="product-cardd__title">{item.title}</h2>
                  <p className="product-cardd__price">
                    {item.price} —Å–æ–º x {item.quantity || 1} ={" "}
                    {(item.price * (item.quantity || 1)).toFixed(2)} —Å–æ–º
                  </p>
                </div>
                <div className="product-cardd__Tp2">
                  <div className="quantity-controls">
                    <button onClick={() => decreaseQuantity(index)}>-</button>
                    <span>{item.quantity || 1}</span>
                    <button onClick={() => increaseQuantity(index)}>+</button>
                  </div>
                  <button
                    onClick={() => handleRemoveFromCart(index)}
                    className="btn-remove"
                  >
                    –£–¥–∞–ª–∏—Ç—å
                  </button>
                </div>
              </div>
            ))
          )}
        </div>

        {cartItems.length > 0 && (
          <div className="basket-total">
            <h2>–û–±—â–∞—è —Å—É–º–º–∞: {totalAmount.toFixed(2)} —Å–æ–º</h2>
          </div>
        )}

        <h2 className="title">–î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏</h2>

        <div className="delivery-form">
          <form onSubmit={handleSubmit}>
            <label className="delivery-form__label">
              –ò–º—è:
              <input
                type="text"
                name="name"
                value={formData.name}
                onChange={handleFormChange}
                required
              />
              {formErrors.name && <p className="error-text">{formErrors.name}</p>}
            </label>

            <label className="delivery-form__label">
              –§–∞–º–∏–ª–∏—è:
              <input
                type="text"
                name="surname"
                value={formData.surname}
                onChange={handleFormChange}
                required
              />
              {formErrors.surname && <p className="error-text">{formErrors.surname}</p>}
            </label>

            <label className="delivery-form__label">
              –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:
              <input
                type="text"
                name="address"
                value={formData.address}
                onChange={handleFormChange}
                required
              />
              {formErrors.address && <p className="error-text">{formErrors.address}</p>}
            </label>

<label className="delivery-form__label">
  –¢–µ–ª–µ—Ñ–æ–Ω:
  <IMaskInput
  mask="+996 000 000 000"
  lazy={false}
  unmask={false}
  value={formData.phone}
  onAccept={(value) =>
    setFormData((prev) => ({ ...prev, phone: value }))
  }
  className="your-input-class"
/>
  {formErrors.phone && <p className="error-text">{formErrors.phone}</p>}
</label>

            <label className="delivery-form__label">
              –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:
              <select
                name="paymentMethod"
                value={formData.paymentMethod}
                onChange={handleFormChange}
                required
              >
                <option value="–ù–∞–ª–∏—á–Ω—ã–µ">–ù–∞–ª–∏—á–Ω—ã–µ</option>
                <option value="–ü–µ—Ä–µ–≤–æ–¥–æ–º">–ü–µ—Ä–µ–≤–æ–¥–æ–º</option>
              </select>
              {formErrors.paymentMethod && <p className="error-text">{formErrors.paymentMethod}</p>}
            </label>

            <label className="delivery-form__label">
              –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:
              <textarea
                name="comments"
                value={formData.comments}
                onChange={handleFormChange}
              ></textarea>
            </label>

            {cartItems.length > 0 && (
              <div className="basket-total">
                <h2>–û–±—â–∞—è —Å—É–º–º–∞: {totalAmount.toFixed(2)} —Å–æ–º</h2>
                <button type="submit" className="basket-total__btn">
                  –ó–∞–∫–∞–∑–∞—Ç—å
                </button>
              </div>
            )}
          </form>
        </div>
      </section>
    </div>
  );
}
